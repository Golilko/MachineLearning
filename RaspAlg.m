clc;
clear;
close all;
M=12;
N=8;
iter = 10;
%определение признаков(вектора состояния)для каждого узла
Xm = randn(M,N, M);
%весовые коэффициенты(информационный вектор) для каждого узла
w = randn(N, 1, M);
%аддитивная ошибка для каждого узла
em = randn(M, 1, M);
%определение ответов(наблюдаемый сигнал) на каждом узле
Ym = multiprod(Xm,w)+em;

A = zeros(M,M);
for i=1:M
    for j=i+1:M
        % проверка, являются ли узлы i и j соседними
        if (i==1 && j==3) || (i==2 && j==3) || (i==3 && j==1) || (i==3 && j==2) || ...
           (i==3 && j==4) || (i==3 && j==5) || (i==4 && j==3) || (i==4 && j==6) || ...
           (i==5 && j==3) || (i==5 && j==6) || (i==6 && j==4) || (i==6 && j==5) || ...
           (i==6 && j==7) || (i==6 && j==8) || (i==6 && j==9) || (i==7 && j==6) || ...
           (i==7 && j==10) || (i==8 && j==6) || (i==8 && j==9) || (i==9 && j==6) || ...
           (i==9 && j==8) || (i==9 && j==10) || (i==9 && j==11) || (i==10 && j==7) || ...
           (i==10 && j==9) || (i==10 && j==12) || (i==11 && j==9) || (i==11 && j==12) || ...
           (i==12 && j==10) || (i==12 && j==11)
            A(i,j) = 1/(max(i,j)+1);
        end
    end
    % задание значения для диагонального элемента
    A(i,i) = 1 - sum(A(i,:));
end
A
% Проверка значения коэффициентов Метрополиса-Хастингса
one = ones(M,1); % создание единичного вектора
prov = A * one % умножение матрицы на вектор


%Градиентный метод(стохастический)
g = 0.01;
Usr = zeros(1,iter);
%вычисление СКО и усреднение по каждому узлу
SCO = zeros(1,M);
%случайные значения признаков на первом шаге
W = zeros(N, 1, M); 

for i = 1:iter
         KSI = W+g*2*multiprod(pagetranspose(Xm),(Ym-(multiprod(Xm,W))));
         sumA = zeros(N, 1, M); % Инициализируем переменную sumA
         for k = 1:M
             for j = 1:M
                sumA(:,:,k) = sumA(:,:,k)+A(k,j)*(KSI(:,:,j)- KSI(:,:,k));
             end
         end
         %sumA
         W = KSI+sumA;
            for k = 1:M
                SCO(k) = norm(w(:,:,k)-W(:,:,k), 2);
            end
         Usr(i) = (sum(SCO))/M;
         
end
%Построение графика
figure
plot(Usr, '-r', 'LineWidth', 2)
xlabel('Количество итераций')
ylabel('Значение СКО')
grid on;
